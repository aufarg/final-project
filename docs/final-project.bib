@article{AirlinesElectronicEngineeringCommittee2012,
abstract = {Subset services},
author = {{Airlines Electronic Engineering Committee}},
file = {:home/dancinggrass/Books/ARINC 653P1-3.pdf:pdf},
isbn = {ARINC Specification 653},
journal = {Arinc 653},
pages = {85},
langid = {bahasai},
title = {{653P1-3 Avionics Application Software Standard Interface Part 1 - Required Services}},
year = {2012}
}
@book{Chisnall2014,
abstract = {Xen is a virtualization tool, but what does this mean? In this chapter, we will explore some of the history of virtualization, and some of the reasons why people found, and continue to find, it useful. We will have a look in particular at the x86, or IA32, architecture, why it presents such a problem for virtualization, and some possible ways around these limitations from other virtualization systems and finally from Xen itself.},
archivePrefix = {arXiv},
arxivId = {arXiv:1011.1669v3},
author = {Chisnall, David},
booktitle = {Psychological Science},
doi = {10.1007/s13398-014-0173-7.2},
eprint = {arXiv:1011.1669v3},
file = {:home/dancinggrass/Books/System/Realtime Xen/00-The Definitive Guide to the Xen Hypervisor.pdf:pdf},
isbn = {9780874216561},
issn = {1467-9280},
keywords = {xen hypervisor virtualization},
number = {9},
pages = {307},
pmid = {25052830},
title = {{The Definitive Guide to the Xen Hypervisor}},
url = {http://www.ncbi.nlm.nih.gov/pubmed/15003161{\%}5Cnhttp://cid.oxfordjournals.org/lookup/doi/10.1093/cid/cir991{\%}5Cnhttp://www.scielo.cl/pdf/udecada/v15n26/art06.pdf{\%}5Cnhttp://www.scopus.com/inward/record.url?eid=2-s2.0-84861150233{\&}partnerID=tZOtx3y1},
volume = {25},
year = {2014}
}
@article{Garside2009,
abstract = {Traditionally, airplane systems have been designed and implemented in a federated fashion with each system providing for its own needs. A typical airplane system could be made up of one or more black boxes each having its own enclosure and providing for its own power conditioning and cooling needs. I/O signal conditioning and computational processing necessary to provide the intended function is also provided on a box-by-box basis. With each new generation of airplanes, the number of systems increased. Driven by market forces the need grew to reduce weight and electrical power to keep the airplane fuel efficient, cost-effective, and competitive. To address this contradiction, the Integrated Modular Avionics (IMA) concept was born. Within IMA architectures, avionics functions share common resources. Multiple black boxes are optimized to the minimum IMA resources necessary. This optimization provides the sought-after weight and power savings, and also provides for a much reduced number of parts to be maintained and controlled. These are all beneficial for the airplane manufacturer and airplane operator. However, MIMA architectures present some unique challenges during their development and integration. This will explore some of the more significant of these integration challenges associated with IMA architectures, including: What is the system? For the supplier whose system has been selected to be hosted on the IMA platform, the boundaries can be unclear. What was once a box with circuit cards and substance has been abstracted to a software application. Connection to other systems or to sensorsteffectors was via airplane wiring. Now, complex in-line electronics modules exist that the supplier knows little or nothing about. For the provider of the IMA platform, the system may be defined as a set of available resources (processing, communication, 1/0, etc.) to be shared by the systems to be hosted. To the airplane manufacturer the system is a working suite of avionics. - With the LMA approach: "Who is responsible for ensuring that boundaries and expectations are clearly defined and understood so that nothing gets overlooked?" Who is the system integrator? Within the IMA environment the answer changes depending on your perspective. The supplier of a hosted function may be considered responsible for the integration of their system components. The IMA platform provider may believe they are responsible for the platform elements. The airplane manufacturer wants an integrated solution. With the IMA approach: "Who is responsible for ensuring that the whole is equal to the sum of its parts?" How is the integration of an IMA architecture handled? As more and more of the hosted systems are brought together, IMA architectures can present challenges not seen with federated systems. The nature of IMA architectures requires more of the components to be available and working to allow seemingly simple tasks to take place. With the IMA approach: "Who is responsible for ensuring that this integration is planned and executed in the optimum sequence?"},
author = {Garside, Richard and Pighetti, F. Joe},
doi = {10.1109/MAES.2009.4811086},
file = {:home/dancinggrass/Downloads/garside2007.pdf:pdf},
isbn = {1424411084},
issn = {08858985},
journal = {IEEE Aerospace and Electronic Systems Magazine},
number = {3},
pages = {31--34},
title = {{Integrating modular avionics: A new role emerges}},
volume = {24},
year = {2009}
}
@article{Haritsa1992,
author = {Haritsa, Jayant R. and Carey, Michael J. and Livny, Miron},
doi = {10.1007/BF00365312},
file = {:home/dancinggrass/Downloads/haritsa1992.pdf:pdf},
issn = {09226443},
journal = {Real-Time Systems},
number = {3},
pages = {203--241},
title = {{Data access scheduling in firm real-time database systems}},
volume = {4},
year = {1992}
}
@article{Littlefield-Lawwill2008,
abstract = {Projeto de arquiteturas IMA considerando aspectos de particionamento (time-space partitioning)},
author = {Littlefield-Lawwill, Justin and Kinnan, Larry},
doi = {10.1109/DASC.2008.4702751},
file = {:home/dancinggrass/Downloads/littlefieldlawwill2008.pdf:pdf},
isbn = {9781424422081},
journal = {AIAA/IEEE Digital Avionics Systems Conference - Proceedings},
pages = {1--11},
title = {{System considerations for robust time and space partitioning in integrated modular avionics}},
year = {2008}
}
@article{Rushby2000,
abstract = {Automated aircraft control has traditionally been divided into distinct "functions" that are implemented separately (e.g., autopilot, autothrottle, flight management); each function has its own fault-tolerant computer system, and dependencies among different functions are generally limited to the exchange of sensor and control data. A by-product of this "federated" architecture is that faults are strongly contained within the computer system of the function where they occur and cannot readily propagate to affect the operation of other functions. More modern avionics architectures contemplate supporting multiple functions on a single, shared, fault-tolerant computer system where natural fault containment boundaries are less sharply defined. Partitioning uses appropriate hardware and software mechanisms to restore strong fault containment to such integrated architectures. This report examines the requirements for partitioning, mechanisms for their realization, and issues in providing assurance for partitioning. Because partitioning shares some concerns with computer security, security models are reviewed and compared with the concerns of partitioning.},
author = {Rushby, John},
doi = {DOT/FAA/AR-99/58},
file = {:home/dancinggrass/Downloads/faaversion.pdf:pdf},
journal = {Work},
number = {March},
pages = {67},
title = {{Partitioning in avionics architectures: requirements, mechanisms and assurance}},
year = {2000}
}
@article{Shin1994,
abstract = {This paper surveys the state of the art in real-time computing. It$\backslash$nintroduces basic concepts and identifies key issues in the design of$\backslash$nreal-time systems. Solutions proposed in literature for tackling these$\backslash$nissues are also briefly discussed},
author = {Shin, Kang G. and Ramanathan, Parameswaran},
doi = {10.1109/5.259423},
file = {:home/dancinggrass/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Shin, Ramanathan - 1994 - Real-Time Computing A New Discipline of Computer Science and Engineering.pdf:pdf},
issn = {15582256},
journal = {Proceedings of the IEEE},
number = {1},
pages = {6--24},
pmid = {16856666},
title = {{Real-Time Computing: A New Discipline of Computer Science and Engineering}},
volume = {82},
year = {1994}
}
@inproceedings{VanderLeest2010,
abstract = {We have developed an early prototype of an ARINC 653 implementation using the virtualization technology of the open source Xen hypervisor along with a Linux-based domain/partition OS. In this paper we share lessons learned from adding to our prototype both an ARINC 653 CPU scheduler and a simple ARINC 653 serial I/O driver. By using a common hypervisor technology on multiple platforms, early application development can be done in a PC environment with relatively good modeling of the final target's behavior. The paper covers three topics. First, we start with an overview of the ARINC 653 standard, which is important because it reduces development costs, reduces system weight, and lowers certification costs. The standard focuses on resource partitioning of time and space on an avionics computer, managing the three primary subsystems of the computer: Central Processing Unit (CPU), Memory, and Input/Output (I/O). Second, we will review virtualization technology, an established method of sharing a computing resource, considering it for adaptation to ARINC 653. Third, as a case study, we will examine our prototype implementation of the ARINC 653 standard using the Xen open source hypervisor. We conclude with a discussion of our plans for future work towards ARINC 653 simulation and development environments on both PC desktop and embedded targets.},
author = {VanderLeest, Steven H.},
booktitle = {AIAA/IEEE Digital Avionics Systems Conference - Proceedings},
doi = {10.1109/DASC.2010.5655298},
file = {:home/dancinggrass/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/VanderLeest - 2010 - ARINC 653 hypervisor.pdf:pdf},
isbn = {9781424466160},
issn = {2155-7195},
title = {{ARINC 653 hypervisor}},
year = {2010}
}
